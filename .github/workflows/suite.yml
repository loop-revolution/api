on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
name: Suite
env:
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/testing
  SESSION_SECRET: 1234567890qwertyuiopasdfghjklzxcvbnm
  SMTP_SERVER: TESTING_SMTP_SERVER
  SMTP_USERNAME: TESTING_SMTP_USERNAME
  SMTP_PASSWORD: TESTING_SMTP_PASSWORD
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      ## Checkout & Rust
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      ## Cache
      - name: Binary cache
        id: bin-cache
        uses: actions/cache@v2
        env:
          cache-name: bin
        with:
          path: /usr/share/rust/.cargo/bin
          key: ${{ runner.os }}-bin-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-bin-${{ env.cache-name }}-
      - name: Target cache
        id: target-cache
        uses: actions/cache@v2
        env:
          cache-name: target
        with:
          path: .
          key: ${{ runner.os }}-target-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-target-${{ env.cache-name }}-

      ## Diesel
      - name: Diesel dep
        run: sudo apt install libpq-dev
      - name: Install diesel cli
        if: steps.bin-cache.outputs.cache-hit != 'true'
        run: cargo install diesel_cli --no-default-features --features "postgres"

      ## Tarpaulin
      - name: Install tarpaulin
        if: steps.bin-cache.outputs.cache-hit != 'true'
        run: cargo install cargo-tarpaulin

      ## Load target cache
      - name: Install deps
        if: steps.target-cache.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: check

      ## Upload build artifacts
      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: bin
          path: /usr/share/rust/.cargo/bin
      - name: Upload target
        uses: actions/upload-artifact@v2
        with:
          name: target
          path: target
  test:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testing
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/download-artifact@v2
        with:
          name: target
          path: target

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1

      - uses: actions/download-artifact@v2
        with:
          name: bin
          path: /usr/share/rust/.cargo/bin

      - name: Setup DB
        run: cd block-tools && diesel setup && diesel migration run

      - name: Test + Generate code coverage
        run: cargo tarpaulin --out Xml

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/download-artifact@v2
        with:
          name: target
          path: target

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Basic checks
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Advanced Clippy checks
        uses: actions-rs/cargo@v1
        with:
          command: clippy

      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt

      - name: Check if there are changes in formatting
        id: changes
        uses: UnicornGlobal/has-changes-action@v1.0.11

      - name: Fail if formatting is off
        if: steps.changes.outputs.changed == 1
        run: exit 1
