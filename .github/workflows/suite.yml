on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
name: Suite
env:
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/testing
  SESSION_SECRET: 1234567890qwertyuiopasdfghjklzxcvbnm
  SMTP_SERVER: TESTING_SMTP_SERVER
  SMTP_USERNAME: TESTING_SMTP_USERNAME
  SMTP_PASSWORD: TESTING_SMTP_PASSWORD
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.AUTOTHINGS_TOKEN }}
          submodules: true

      - name: Diesel dependencies
        run: sudo apt install libpq-dev

      - name: Cache global commands
        id: cache-setup
        uses: actions/cache@v2
        env:
          cache-name: cache-setup
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-setup-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-setup-${{ env.cache-name }}-

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      
      - name: Install Diesel-CLI
        if: steps.cache-setup.outputs.cache-hit != 'true'
        run: cargo install diesel_cli --no-default-features --features "postgres"

      - name: Install Tarpaulin
        if: steps.cache-setup.outputs.cache-hit != 'true'
        run: cargo install cargo-tarpaulin

      - name: Cache deps
        id: cache-target
        uses: actions/cache@v2
        env:
          cache-name: cache-target
        with:
          path: ./target
          key: ${{ runner.os }}-target-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-target-${{ env.cache-name }}-

      - name: Install deps
        if: steps.cache-target.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Upload Cargo
        uses: actions/upload-artifact@v2
        with:
          name: global-cargo
          path: ~/.cargo

      - name: Upload Deps
        uses: actions/upload-artifact@v2
        with:
          name: build-target
          path: ./target
  test:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testing
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: global-cargo
          path: ~/.cargo

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1

      - uses: actions/download-artifact@v2
        with:
          name: build-target
          path: target

      - name: Setup DB
        run: cd block-tools && diesel setup && diesel migration run

      - name: Test + Generate code coverage
        run: cargo tarpaulin --out Xml

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Basic checks
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Advanced Clippy checks
        uses: actions-rs/cargo@v1
        with:
          command: clippy

      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt

      - name: Check if there are changes in formatting
        id: changes
        uses: UnicornGlobal/has-changes-action@v1.0.11

      - name: Fail if formatting is off
        if: steps.changes.outputs.changed == 1
        run: exit 1
